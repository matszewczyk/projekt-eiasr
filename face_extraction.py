# -*- coding: utf-8 -*-
"""Face_extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/mhryciow/59e85dcdb0703005b41f362e12cb4657/face_extraction.ipynb
"""

from google.colab import drive
from PIL import Image, ImageOps
import numpy as np
import cv2 
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import os
from matplotlib.patches import Rectangle

drive.mount('/content/drive/')

img = Image.open('/content/drive/MyDrive/EIASR_test_photos/img1.jpg')

display(img)

def extract_faces(path,face_model):
  # Source: https://github.com/kb22/Create-Face-Data-from-Images
  image = cv2.imread(path)
  (h, w) = image.shape[:2]
  # Finding all possible faces
  blob = cv2.dnn.blobFromImage(cv2.resize(image, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))
  face_model.setInput(blob)
  detections = face_model.forward()

  faces = []
  # Showing image 
  img = Image.open(path)
  img = np.array(img)
  fig,ax = plt.subplots(1)
  fig.set_size_inches(16,8)
  ax.imshow(img)


  # Loop through all images and strip out faces
  count = 0
  for i in range(0, detections.shape[2]):
    box = detections[0,0,i,3:7] * np.array([w,h,w,h])
    # Extracting borders
    startX, startY, endX, endY = box.astype("int")
    confidence = detections[0,0,i,2]
    # If confidentce is grater than 0.5 it is face, so save it
    if confidence > 0.5:
      count += 1
      frame = image[startY:endY, startX:endX]
      faces.append(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))

      # Adding rectangle border around face to image
      rect = patches.Rectangle((startX,startY),endX-startX,endY-startY,linewidth=1,edgecolor='r',facecolor='none')
      ax.add_patch(rect)

  # In order to get every face use: faces[0] - first face, faces[1] - second face, etc.
  return faces

# Reading face extraction model from files
prototxt_path = os.path.join('/content/drive/MyDrive/model_data/deploy.prototxt')
caffemodel_path = os.path.join('/content/drive/MyDrive/model_data/weights.caffemodel')
face_model = cv2.dnn.readNetFromCaffe(prototxt_path, caffemodel_path)

faces = extract_faces('/content/drive/MyDrive/EIASR_test_photos/img3.jpg', face_model)

plt.imshow(faces[0])

